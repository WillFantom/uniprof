ARCH = @target_arch@
CC = @CC@
CXX = @CXX@
prefix = @prefix@
exec_prefix = @exec_prefix@

# we have two options: build against installed system libraries and headers,
# or build against a xen source tree. We have to set flags accordingly

ifeq (@use_syslibs@,y)
# OPTION 1: build against system libraries and headers
ARCH = @target_arch@
CPPFLAGS += -D__XEN_TOOLS__ -Iinclude
CFLAGS   += @oflags@ @wflags@ -MMD -MF .$(if $(filter-out .,$(@D)),$(subst /,@,$(@D))@)$(@F).d
CXXFLAGS += @oflags@ -Wall -Wextra -MMD -MF .$(if $(filter-out .,$(@D)),$(subst /,@,$(@D))@)$(@F).d
ifeq (@hypercall_lib@,libxc)
LDLIBS   += -lxenctrl
else
LDLIBS   += -lxencall -lxenforeignmemory
endif

else
# OPTION 2: build against Xen source tree
XEN_ROOT ?= $(realpath @xenroot@)
include $(XEN_ROOT)/tools/Rules.mk
CPPFLAGS += -D__XEN_TOOLS__ -Iinclude
CFLAGS   += $(CFLAGS_libxenctrl) @oflags@ -Wall -Wextra
CXXFLAGS += @oflags@ -Wall -Wextra -MMD -MF .$(if $(filter-out .,$(@D)),$(subst /,@,$(@D))@)$(@F).d
ifeq (@hypercall_lib@,libxc)
LDLIBS   += $(LDLIBS_libxenctrl)
else
LDLIBS   += $(LDLIBS_libxencall) $(LDLIBS_libxenforeignmemory)
endif
endif

LDLIBS   += @libunwind@

BIN      = uniprof symbolize
OBJ      = $(addsuffix .o,$(BIN)) xen-interface-common.o xen-interface-$(ARCH).o
DEP      = $(addprefix .,$(addsuffix .d,$(OBJ)))

.PHONY: all
all: $(BIN)

.PHONY: clean distclean
clean:
	$(RM) *.a *.so *.o $(BIN) $(DEP) $(OBJ)

distclean: clean
	-rm -rf autom4te.cache/
	$(RM) config.log autoscan.log config.cache config.log config.status include/config.h Makefile

install: $(BIN)
	/bin/cp -v $(BIN) @bindir@/

.PHONY: uninstall
uninstall:
	rm -vf $(addprefix @bindir@/, $(BIN))

uniprof: uniprof.o xen-interface-common.o xen-interface-$(ARCH).o
	$(CC) $(LDFLAGS) -o $@ $^ $(LDLIBS) $(APPEND_LDFLAGS)

symbolize: symbolize.o
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $< $(APPEND_LDFLAGS)

-include $(DEP)
